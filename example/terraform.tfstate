{
    "version": 3,
    "terraform_version": "0.11.7",
    "serial": 6,
    "lineage": "cd948130-2a35-8d78-5bc7-3eab50fb81aa",
    "modules": [
        {
            "path": [
                "root"
            ],
            "outputs": {
                "bucket": {
                    "sensitive": false,
                    "type": "string",
                    "value": "images-images-20180713101413249800000001"
                },
                "cloudfront_url": {
                    "sensitive": false,
                    "type": "string",
                    "value": "images.getlionel.com"
                }
            },
            "resources": {},
            "depends_on": []
        },
        {
            "path": [
                "root",
                "cloudfront-image-compression"
            ],
            "outputs": {
                "bucket": {
                    "sensitive": false,
                    "type": "string",
                    "value": "images-images-20180713101413249800000001"
                },
                "cloudfront_url": {
                    "sensitive": false,
                    "type": "string",
                    "value": "images.getlionel.com"
                }
            },
            "resources": {
                "aws_cloudfront_distribution.s3_distribution": {
                    "type": "aws_cloudfront_distribution",
                    "depends_on": [
                        "aws_s3_bucket.images",
                        "data.aws_acm_certificate.certificate",
                        "module.lambda"
                    ],
                    "primary": {
                        "id": "E3D1LBGFBCO7I0",
                        "attributes": {
                            "active_trusted_signers.%": "2",
                            "active_trusted_signers.enabled": "false",
                            "active_trusted_signers.items.#": "0",
                            "aliases.#": "1",
                            "aliases.919627538": "images.getlionel.com",
                            "arn": "arn:aws:cloudfront::771399579355:distribution/E3D1LBGFBCO7I0",
                            "cache_behavior.#": "0",
                            "caller_reference": "2018-07-13T11:20:19.042121833+01:00",
                            "custom_error_response.#": "1",
                            "custom_error_response.827018418.error_caching_min_ttl": "0",
                            "custom_error_response.827018418.error_code": "502",
                            "custom_error_response.827018418.response_code": "0",
                            "custom_error_response.827018418.response_page_path": "",
                            "default_cache_behavior.#": "1",
                            "default_cache_behavior.3912726714.allowed_methods.#": "3",
                            "default_cache_behavior.3912726714.allowed_methods.0": "HEAD",
                            "default_cache_behavior.3912726714.allowed_methods.1": "GET",
                            "default_cache_behavior.3912726714.allowed_methods.2": "OPTIONS",
                            "default_cache_behavior.3912726714.cached_methods.#": "2",
                            "default_cache_behavior.3912726714.cached_methods.0": "HEAD",
                            "default_cache_behavior.3912726714.cached_methods.1": "GET",
                            "default_cache_behavior.3912726714.compress": "false",
                            "default_cache_behavior.3912726714.default_ttl": "900",
                            "default_cache_behavior.3912726714.field_level_encryption_id": "",
                            "default_cache_behavior.3912726714.forwarded_values.#": "1",
                            "default_cache_behavior.3912726714.forwarded_values.2555876073.cookies.#": "1",
                            "default_cache_behavior.3912726714.forwarded_values.2555876073.cookies.2625240281.forward": "none",
                            "default_cache_behavior.3912726714.forwarded_values.2555876073.cookies.2625240281.whitelisted_names.#": "0",
                            "default_cache_behavior.3912726714.forwarded_values.2555876073.headers.#": "0",
                            "default_cache_behavior.3912726714.forwarded_values.2555876073.query_string": "true",
                            "default_cache_behavior.3912726714.forwarded_values.2555876073.query_string_cache_keys.#": "0",
                            "default_cache_behavior.3912726714.lambda_function_association.#": "1",
                            "default_cache_behavior.3912726714.lambda_function_association.2737900744.event_type": "origin-response",
                            "default_cache_behavior.3912726714.lambda_function_association.2737900744.lambda_arn": "arn:aws:lambda:us-east-1:771399579355:function:origin_response-images:2",
                            "default_cache_behavior.3912726714.max_ttl": "86400",
                            "default_cache_behavior.3912726714.min_ttl": "0",
                            "default_cache_behavior.3912726714.smooth_streaming": "false",
                            "default_cache_behavior.3912726714.target_origin_id": "s3_origin",
                            "default_cache_behavior.3912726714.trusted_signers.#": "0",
                            "default_cache_behavior.3912726714.viewer_protocol_policy": "redirect-to-https",
                            "default_root_object": "index.html",
                            "domain_name": "dtnggl7htcqr.cloudfront.net",
                            "enabled": "true",
                            "etag": "E1NFY3UXZR15W2",
                            "hosted_zone_id": "Z2FDTNDATAQYW2",
                            "http_version": "http2",
                            "id": "E3D1LBGFBCO7I0",
                            "in_progress_validation_batches": "0",
                            "is_ipv6_enabled": "true",
                            "last_modified_time": "2018-07-13 10:20:19.594 +0000 UTC",
                            "logging_config.#": "0",
                            "origin.#": "1",
                            "origin.1875795393.custom_header.#": "0",
                            "origin.1875795393.custom_origin_config.#": "1",
                            "origin.1875795393.custom_origin_config.3832794885.http_port": "80",
                            "origin.1875795393.custom_origin_config.3832794885.https_port": "443",
                            "origin.1875795393.custom_origin_config.3832794885.origin_keepalive_timeout": "5",
                            "origin.1875795393.custom_origin_config.3832794885.origin_protocol_policy": "http-only",
                            "origin.1875795393.custom_origin_config.3832794885.origin_read_timeout": "30",
                            "origin.1875795393.custom_origin_config.3832794885.origin_ssl_protocols.#": "2",
                            "origin.1875795393.custom_origin_config.3832794885.origin_ssl_protocols.0": "SSLv3",
                            "origin.1875795393.custom_origin_config.3832794885.origin_ssl_protocols.1": "TLSv1",
                            "origin.1875795393.domain_name": "images-images-20180713101413249800000001.s3-website.eu-west-2.amazonaws.com",
                            "origin.1875795393.origin_id": "s3_origin",
                            "origin.1875795393.origin_path": "",
                            "origin.1875795393.s3_origin_config.#": "0",
                            "price_class": "PriceClass_All",
                            "restrictions.#": "1",
                            "restrictions.1097372288.geo_restriction.#": "1",
                            "restrictions.1097372288.geo_restriction.2625240281.locations.#": "0",
                            "restrictions.1097372288.geo_restriction.2625240281.restriction_type": "none",
                            "retain_on_delete": "false",
                            "status": "InProgress",
                            "tags.%": "0",
                            "viewer_certificate.#": "1",
                            "viewer_certificate.3642025046.acm_certificate_arn": "arn:aws:acm:us-east-1:771399579355:certificate/a668ff2a-0aeb-42a5-8973-0f95bed8a834",
                            "viewer_certificate.3642025046.cloudfront_default_certificate": "false",
                            "viewer_certificate.3642025046.iam_certificate_id": "",
                            "viewer_certificate.3642025046.minimum_protocol_version": "TLSv1",
                            "viewer_certificate.3642025046.ssl_support_method": "sni-only",
                            "web_acl_id": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "module.cloudfront-image-compression.provider.aws"
                },
                "aws_route53_record.cdn_alias": {
                    "type": "aws_route53_record",
                    "depends_on": [
                        "aws_cloudfront_distribution.s3_distribution",
                        "data.aws_route53_zone.cdn"
                    ],
                    "primary": {
                        "id": "Z2DCSWM33MDBXN_images.getlionel.com_A",
                        "attributes": {
                            "alias.#": "1",
                            "alias.3215332085.evaluate_target_health": "true",
                            "alias.3215332085.name": "dtnggl7htcqr.cloudfront.net",
                            "alias.3215332085.zone_id": "Z2FDTNDATAQYW2",
                            "allow_overwrite": "true",
                            "fqdn": "images.getlionel.com",
                            "health_check_id": "",
                            "id": "Z2DCSWM33MDBXN_images.getlionel.com_A",
                            "name": "images.getlionel.com",
                            "records.#": "0",
                            "set_identifier": "",
                            "ttl": "0",
                            "type": "A",
                            "zone_id": "Z2DCSWM33MDBXN"
                        },
                        "meta": {
                            "schema_version": "2"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "module.cloudfront-image-compression.provider.aws"
                },
                "aws_s3_bucket.images": {
                    "type": "aws_s3_bucket",
                    "depends_on": [],
                    "primary": {
                        "id": "images-images-20180713101413249800000001",
                        "attributes": {
                            "acceleration_status": "",
                            "acl": "public-read",
                            "arn": "arn:aws:s3:::images-images-20180713101413249800000001",
                            "bucket": "images-images-20180713101413249800000001",
                            "bucket_domain_name": "images-images-20180713101413249800000001.s3.amazonaws.com",
                            "bucket_prefix": "images-images-",
                            "bucket_regional_domain_name": "images-images-20180713101413249800000001.s3.eu-west-2.amazonaws.com",
                            "cors_rule.#": "0",
                            "force_destroy": "false",
                            "hosted_zone_id": "Z3GKZC51ZF0DB4",
                            "id": "images-images-20180713101413249800000001",
                            "logging.#": "0",
                            "region": "eu-west-2",
                            "replication_configuration.#": "0",
                            "request_payer": "BucketOwner",
                            "server_side_encryption_configuration.#": "0",
                            "tags.%": "0",
                            "versioning.#": "1",
                            "versioning.0.enabled": "false",
                            "versioning.0.mfa_delete": "false",
                            "website.#": "1",
                            "website.0.error_document": "index.html",
                            "website.0.index_document": "index.html",
                            "website.0.redirect_all_requests_to": "",
                            "website.0.routing_rules": "",
                            "website_domain": "s3-website.eu-west-2.amazonaws.com",
                            "website_endpoint": "images-images-20180713101413249800000001.s3-website.eu-west-2.amazonaws.com"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "module.cloudfront-image-compression.provider.aws"
                },
                "data.aws_acm_certificate.certificate": {
                    "type": "aws_acm_certificate",
                    "depends_on": [],
                    "primary": {
                        "id": "2018-07-13 10:24:38.582451366 +0000 UTC",
                        "attributes": {
                            "arn": "arn:aws:acm:us-east-1:771399579355:certificate/a668ff2a-0aeb-42a5-8973-0f95bed8a834",
                            "domain": "images.getlionel.com",
                            "id": "2018-07-13 10:24:38.582451366 +0000 UTC",
                            "most_recent": "true",
                            "types.#": "1",
                            "types.0": "AMAZON_ISSUED"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "module.cloudfront-image-compression.provider.aws.us-east-1"
                },
                "data.aws_route53_zone.cdn": {
                    "type": "aws_route53_zone",
                    "depends_on": [],
                    "primary": {
                        "id": "Z2DCSWM33MDBXN",
                        "attributes": {
                            "caller_reference": "getlionel-HostedZo-DKFMUP58I9UA",
                            "comment": "",
                            "id": "Z2DCSWM33MDBXN",
                            "name": "getlionel.com.",
                            "name_servers.#": "4",
                            "name_servers.0": "ns-103.awsdns-12.com",
                            "name_servers.1": "ns-1778.awsdns-30.co.uk",
                            "name_servers.2": "ns-883.awsdns-46.net",
                            "name_servers.3": "ns-1379.awsdns-44.org",
                            "private_zone": "false",
                            "resource_record_set_count": "7",
                            "zone_id": "Z2DCSWM33MDBXN"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "module.cloudfront-image-compression.provider.aws"
                }
            },
            "depends_on": []
        },
        {
            "path": [
                "root",
                "cloudfront-image-compression",
                "lambda"
            ],
            "outputs": {
                "origin_response_function_arn": {
                    "sensitive": false,
                    "type": "string",
                    "value": "arn:aws:lambda:us-east-1:771399579355:function:origin_response-images:2"
                },
                "origin_response_function_name": {
                    "sensitive": false,
                    "type": "string",
                    "value": "origin_response-images"
                }
            },
            "resources": {
                "aws_iam_role.iam_for_lambda": {
                    "type": "aws_iam_role",
                    "depends_on": [],
                    "primary": {
                        "id": "iam_for_lambda_at_edge-images",
                        "attributes": {
                            "arn": "arn:aws:iam::771399579355:role/iam_for_lambda_at_edge-images",
                            "assume_role_policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"lambda.amazonaws.com\",\"edgelambda.amazonaws.com\"]},\"Action\":\"sts:AssumeRole\"}]}",
                            "create_date": "2018-07-13T10:15:57Z",
                            "force_detach_policies": "false",
                            "id": "iam_for_lambda_at_edge-images",
                            "max_session_duration": "3600",
                            "name": "iam_for_lambda_at_edge-images",
                            "path": "/",
                            "unique_id": "AROAJVMDIZGUOSULD4L2E"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "module.cloudfront-image-compression.provider.aws"
                },
                "aws_iam_role_policy.lambda_role_policy": {
                    "type": "aws_iam_role_policy",
                    "depends_on": [
                        "aws_iam_role.iam_for_lambda"
                    ],
                    "primary": {
                        "id": "iam_for_lambda_at_edge-images:lambda-policy-at-edge-images",
                        "attributes": {
                            "id": "iam_for_lambda_at_edge-images:lambda-policy-at-edge-images",
                            "name": "lambda-policy-at-edge-images",
                            "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n      {\n         \"Effect\": \"Allow\",\n         \"Action\": [\n            \"logs:CreateLogGroup\",\n            \"logs:CreateLogStream\",\n            \"logs:PutLogEvents\"\n         ],\n         \"Resource\": [\n            \"*\"\n         ]\n      }\n  ]\n}\n",
                            "role": "iam_for_lambda_at_edge-images"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "module.cloudfront-image-compression.provider.aws"
                },
                "aws_lambda_function.origin_response": {
                    "type": "aws_lambda_function",
                    "depends_on": [
                        "aws_iam_role.iam_for_lambda",
                        "data.archive_file.lambda_origin_response"
                    ],
                    "primary": {
                        "id": "origin_response-images",
                        "attributes": {
                            "arn": "arn:aws:lambda:us-east-1:771399579355:function:origin_response-images",
                            "dead_letter_config.#": "0",
                            "description": "",
                            "environment.#": "0",
                            "filename": "/Users/Lionel/Documents/terraform-aws-cloudfront-image-compression/example/.terraform/modules/3e8139b2006212e3d10ceed2cea92996/origin_response.zip",
                            "function_name": "origin_response-images",
                            "handler": "index.handler",
                            "id": "origin_response-images",
                            "invoke_arn": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:771399579355:function:origin_response-images/invocations",
                            "kms_key_arn": "",
                            "last_modified": "2018-07-13T10:20:17.343+0000",
                            "memory_size": "128",
                            "publish": "true",
                            "qualified_arn": "arn:aws:lambda:us-east-1:771399579355:function:origin_response-images:2",
                            "reserved_concurrent_executions": "0",
                            "role": "arn:aws:iam::771399579355:role/iam_for_lambda_at_edge-images",
                            "runtime": "nodejs6.10",
                            "source_code_hash": "kDbeXlr4nnyMstTcV91CdNGJc4u4E/aSBHsMrX5Xo3A=",
                            "source_code_size": "23736228",
                            "tags.%": "0",
                            "timeout": "15",
                            "tracing_config.#": "1",
                            "tracing_config.0.mode": "PassThrough",
                            "version": "2",
                            "vpc_config.#": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "module.cloudfront-image-compression.module.lambda.provider.aws.us-east-1"
                },
                "data.archive_file.lambda_origin_response": {
                    "type": "archive_file",
                    "depends_on": [],
                    "primary": {
                        "id": "3bdd56cd217c3a9325374efefad1c48649a4bfa7",
                        "attributes": {
                            "id": "3bdd56cd217c3a9325374efefad1c48649a4bfa7",
                            "output_base64sha256": "kDbeXlr4nnyMstTcV91CdNGJc4u4E/aSBHsMrX5Xo3A=",
                            "output_md5": "4f8899806fd030e17f5cbb150311fb80",
                            "output_path": "/Users/Lionel/Documents/terraform-aws-cloudfront-image-compression/example/.terraform/modules/3e8139b2006212e3d10ceed2cea92996/origin_response.zip",
                            "output_sha": "3bdd56cd217c3a9325374efefad1c48649a4bfa7",
                            "output_size": "23736228",
                            "source.#": "0",
                            "source_dir": "/Users/Lionel/Documents/terraform-aws-cloudfront-image-compression/example/.terraform/modules/3e8139b2006212e3d10ceed2cea92996/code/origin_response",
                            "type": "zip"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.archive"
                },
                "data.template_file.indexjs": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "4c593f6f445124248668b8ef69e2ea268cd0e34e41907d2042a1a2e55fc21a8f",
                        "attributes": {
                            "id": "4c593f6f445124248668b8ef69e2ea268cd0e34e41907d2042a1a2e55fc21a8f",
                            "rendered": "const querystring = require('querystring')\nconst http = require('http')\nconst Sharp = require('sharp')\n\nexports.handler = (event, context, callback) =\u003e {\n    const request = event.Records[0].cf.request\n\n    console.log(request.uri)\n\n    if (request.uri === '/favicon.ico') {\n        // avoids generating 404 errors when testing image compression in the browser\n        callback(null, {\n            bodyEncoding: 'base64',\n            body: 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQEAYAAABPYyMiAAAABmJLR0T///////8JWPfcAAAACXBIWXMAAABIAAAASABGyWs+AAAAF0lEQVRIx2NgGAWjYBSMglEwCkbBSAcACBAAAeaR9cIAAAAASUVORK5CYII=',\n            headers: {\n                'content-type': [{\n                    key: 'Content-Type',\n                    value: 'image/x-icon'\n                }]\n            },\n            status: '200',\n            statusDescription: 'OK'\n        })\n    } else {\n        const options = querystring.parse(request.querystring)\n        const maxSize = 2000\n        const width = Math.min(options.width || maxSize, maxSize)\n        const height = Math.min(options.height || maxSize, maxSize)\n        const webp = options.webp == 1\n        const source_url = 'http://images-images-20180713101413249800000001.s3-website.eu-west-2.amazonaws.com' + request.uri\n\n        console.log(source_url)\n\n        // make sure input values are numbers\n        if (Number.isNaN(width) || Number.isNaN(height)) {\n            callback(null, {\n                status: '400',\n                statusDescription: 'Invalid input'\n            })\n        } else {\n            // download the file from the origin server\n            http.get(source_url, (res) =\u003e {\n                const statusCode = res.statusCode\n\n                if(statusCode === 200) {\n                    var data = []\n\n                    res.on('data', function (chunk) {\n                        data.push(chunk)\n                    }).on('end', function () {\n                        var buffer = Buffer.concat(data)\n\n                        try {\n                            if (webp) {\n                                Sharp(buffer)\n                                    .resize(width, height)\n                                    .webp({\n                                        quality: 80,\n                                        force: true\n                                    })\n                                    .max().toBuffer()\n                                    .then((_data) =\u003e {\n                                        callback(null, {\n                                            bodyEncoding: 'base64',\n                                            body: new Buffer(_data, 'binary').toString('base64'),\n                                            headers: {\n                                            'cache-control': [{\n                                                key: 'Cache-Control',\n                                                value: 'max-age=100'\n                                            }],\n                                                'content-type': [{\n                                                key: 'Content-Type',\n                                                value: 'image/webp'\n                                            }]\n                                        },\n                                        status: '200',\n                                        statusDescription: 'OK'\n                                    })\n                                }).catch((err) =\u003e {\n                                    console.log(err)\n                                    callback(null, {\n                                        status: '302',\n                                        statusDescription: 'Found',\n                                        headers: {\n                                            location: [{\n                                                key: 'Location',\n                                                value: source_url,\n                                            }],\n                                        },\n                                    })\n                                })\n                            } else {\n                                Sharp(buffer)\n                                    .resize(width, height)\n                                    .jpeg({\n                                        quality: 80,\n                                        chromaSubsampling: '4:4:4',\n                                        force: true,\n                                        progressive: true\n                                    })\n                                    .max().toBuffer()\n                                    .then((_data) =\u003e {\n                                        callback(null, {\n                                            bodyEncoding: 'base64',\n                                                body: new Buffer(_data, 'binary').toString('base64'),\n                                                headers: {\n                                                'cache-control': [{\n                                                    key: 'Cache-Control',\n                                                    value: 'max-age=100'\n                                                }],\n                                                    'content-type': [{\n                                                    key: 'Content-Type',\n                                                    value: 'image/jpeg'\n                                                }]\n                                            },\n                                            status: '200',\n                                            statusDescription: 'OK'\n                                        })\n                                    }).catch((err) =\u003e {\n                                        console.log(err)\n                                        callback(null, {\n                                            status: '302',\n                                            statusDescription: 'Found',\n                                            headers: {\n                                                location: [{\n                                                    key: 'Location',\n                                                    value: source_url,\n                                                }],\n                                            },\n                                        })\n                                    })\n                            }\n                        } catch (e) {\n                            console.log(e.stderr)\n                            callback(null, {\n                                status: '500',\n                                statusDescription: 'Error resizing image'\n                            })\n                        }\n                    }).on('error', (e) =\u003e {\n                        console.log(e)\n                        callback(null, {\n                            status: '302',\n                            statusDescription: 'Found',\n                            headers: {\n                                location: [{\n                                    key: 'Location',\n                                    value: source_url,\n                                }]\n                            }\n                        })\n                    })\n                } else {\n                    // grap the status code from the origin request\n                    // and return to the viewer\n                    console.log('statusCode: ', statusCode)\n                    callback(null, {\n                        status: statusCode.toString(),\n                        headers: originHeaders\n                    })\n                }\n            })\n        }\n    }\n}",
                            "template": "const querystring = require('querystring')\nconst http = require('http')\nconst Sharp = require('sharp')\n\nexports.handler = (event, context, callback) =\u003e {\n    const request = event.Records[0].cf.request\n\n    console.log(request.uri)\n\n    if (request.uri === '/favicon.ico') {\n        // avoids generating 404 errors when testing image compression in the browser\n        callback(null, {\n            bodyEncoding: 'base64',\n            body: 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQEAYAAABPYyMiAAAABmJLR0T///////8JWPfcAAAACXBIWXMAAABIAAAASABGyWs+AAAAF0lEQVRIx2NgGAWjYBSMglEwCkbBSAcACBAAAeaR9cIAAAAASUVORK5CYII=',\n            headers: {\n                'content-type': [{\n                    key: 'Content-Type',\n                    value: 'image/x-icon'\n                }]\n            },\n            status: '200',\n            statusDescription: 'OK'\n        })\n    } else {\n        const options = querystring.parse(request.querystring)\n        const maxSize = 2000\n        const width = Math.min(options.width || maxSize, maxSize)\n        const height = Math.min(options.height || maxSize, maxSize)\n        const webp = options.webp == 1\n        const source_url = 'http://${s3_website_endpoint}' + request.uri\n\n        console.log(source_url)\n\n        // make sure input values are numbers\n        if (Number.isNaN(width) || Number.isNaN(height)) {\n            callback(null, {\n                status: '400',\n                statusDescription: 'Invalid input'\n            })\n        } else {\n            // download the file from the origin server\n            http.get(source_url, (res) =\u003e {\n                const statusCode = res.statusCode\n\n                if(statusCode === 200) {\n                    var data = []\n\n                    res.on('data', function (chunk) {\n                        data.push(chunk)\n                    }).on('end', function () {\n                        var buffer = Buffer.concat(data)\n\n                        try {\n                            if (webp) {\n                                Sharp(buffer)\n                                    .resize(width, height)\n                                    .webp({\n                                        quality: 80,\n                                        force: true\n                                    })\n                                    .max().toBuffer()\n                                    .then((_data) =\u003e {\n                                        callback(null, {\n                                            bodyEncoding: 'base64',\n                                            body: new Buffer(_data, 'binary').toString('base64'),\n                                            headers: {\n                                            'cache-control': [{\n                                                key: 'Cache-Control',\n                                                value: 'max-age=100'\n                                            }],\n                                                'content-type': [{\n                                                key: 'Content-Type',\n                                                value: 'image/webp'\n                                            }]\n                                        },\n                                        status: '200',\n                                        statusDescription: 'OK'\n                                    })\n                                }).catch((err) =\u003e {\n                                    console.log(err)\n                                    callback(null, {\n                                        status: '302',\n                                        statusDescription: 'Found',\n                                        headers: {\n                                            location: [{\n                                                key: 'Location',\n                                                value: source_url,\n                                            }],\n                                        },\n                                    })\n                                })\n                            } else {\n                                Sharp(buffer)\n                                    .resize(width, height)\n                                    .jpeg({\n                                        quality: 80,\n                                        chromaSubsampling: '4:4:4',\n                                        force: true,\n                                        progressive: true\n                                    })\n                                    .max().toBuffer()\n                                    .then((_data) =\u003e {\n                                        callback(null, {\n                                            bodyEncoding: 'base64',\n                                                body: new Buffer(_data, 'binary').toString('base64'),\n                                                headers: {\n                                                'cache-control': [{\n                                                    key: 'Cache-Control',\n                                                    value: 'max-age=100'\n                                                }],\n                                                    'content-type': [{\n                                                    key: 'Content-Type',\n                                                    value: 'image/jpeg'\n                                                }]\n                                            },\n                                            status: '200',\n                                            statusDescription: 'OK'\n                                        })\n                                    }).catch((err) =\u003e {\n                                        console.log(err)\n                                        callback(null, {\n                                            status: '302',\n                                            statusDescription: 'Found',\n                                            headers: {\n                                                location: [{\n                                                    key: 'Location',\n                                                    value: source_url,\n                                                }],\n                                            },\n                                        })\n                                    })\n                            }\n                        } catch (e) {\n                            console.log(e.stderr)\n                            callback(null, {\n                                status: '500',\n                                statusDescription: 'Error resizing image'\n                            })\n                        }\n                    }).on('error', (e) =\u003e {\n                        console.log(e)\n                        callback(null, {\n                            status: '302',\n                            statusDescription: 'Found',\n                            headers: {\n                                location: [{\n                                    key: 'Location',\n                                    value: source_url,\n                                }]\n                            }\n                        })\n                    })\n                } else {\n                    // grap the status code from the origin request\n                    // and return to the viewer\n                    console.log('statusCode: ', statusCode)\n                    callback(null, {\n                        status: statusCode.toString(),\n                        headers: originHeaders\n                    })\n                }\n            })\n        }\n    }\n}",
                            "vars.%": "1",
                            "vars.s3_website_endpoint": "images-images-20180713101413249800000001.s3-website.eu-west-2.amazonaws.com"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "local_file.indexjs": {
                    "type": "local_file",
                    "depends_on": [
                        "data.template_file.indexjs"
                    ],
                    "primary": {
                        "id": "ef6d53b921fcad9acddd2f4b94aaa1c4302861da",
                        "attributes": {
                            "content": "const querystring = require('querystring')\nconst http = require('http')\nconst Sharp = require('sharp')\n\nexports.handler = (event, context, callback) =\u003e {\n    const request = event.Records[0].cf.request\n\n    console.log(request.uri)\n\n    if (request.uri === '/favicon.ico') {\n        // avoids generating 404 errors when testing image compression in the browser\n        callback(null, {\n            bodyEncoding: 'base64',\n            body: 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQEAYAAABPYyMiAAAABmJLR0T///////8JWPfcAAAACXBIWXMAAABIAAAASABGyWs+AAAAF0lEQVRIx2NgGAWjYBSMglEwCkbBSAcACBAAAeaR9cIAAAAASUVORK5CYII=',\n            headers: {\n                'content-type': [{\n                    key: 'Content-Type',\n                    value: 'image/x-icon'\n                }]\n            },\n            status: '200',\n            statusDescription: 'OK'\n        })\n    } else {\n        const options = querystring.parse(request.querystring)\n        const maxSize = 2000\n        const width = Math.min(options.width || maxSize, maxSize)\n        const height = Math.min(options.height || maxSize, maxSize)\n        const webp = options.webp == 1\n        const source_url = 'http://images-images-20180713101413249800000001.s3-website.eu-west-2.amazonaws.com' + request.uri\n\n        console.log(source_url)\n\n        // make sure input values are numbers\n        if (Number.isNaN(width) || Number.isNaN(height)) {\n            callback(null, {\n                status: '400',\n                statusDescription: 'Invalid input'\n            })\n        } else {\n            // download the file from the origin server\n            http.get(source_url, (res) =\u003e {\n                const statusCode = res.statusCode\n\n                if(statusCode === 200) {\n                    var data = []\n\n                    res.on('data', function (chunk) {\n                        data.push(chunk)\n                    }).on('end', function () {\n                        var buffer = Buffer.concat(data)\n\n                        try {\n                            if (webp) {\n                                Sharp(buffer)\n                                    .resize(width, height)\n                                    .webp({\n                                        quality: 80,\n                                        force: true\n                                    })\n                                    .max().toBuffer()\n                                    .then((_data) =\u003e {\n                                        callback(null, {\n                                            bodyEncoding: 'base64',\n                                            body: new Buffer(_data, 'binary').toString('base64'),\n                                            headers: {\n                                            'cache-control': [{\n                                                key: 'Cache-Control',\n                                                value: 'max-age=100'\n                                            }],\n                                                'content-type': [{\n                                                key: 'Content-Type',\n                                                value: 'image/webp'\n                                            }]\n                                        },\n                                        status: '200',\n                                        statusDescription: 'OK'\n                                    })\n                                }).catch((err) =\u003e {\n                                    console.log(err)\n                                    callback(null, {\n                                        status: '302',\n                                        statusDescription: 'Found',\n                                        headers: {\n                                            location: [{\n                                                key: 'Location',\n                                                value: source_url,\n                                            }],\n                                        },\n                                    })\n                                })\n                            } else {\n                                Sharp(buffer)\n                                    .resize(width, height)\n                                    .jpeg({\n                                        quality: 80,\n                                        chromaSubsampling: '4:4:4',\n                                        force: true,\n                                        progressive: true\n                                    })\n                                    .max().toBuffer()\n                                    .then((_data) =\u003e {\n                                        callback(null, {\n                                            bodyEncoding: 'base64',\n                                                body: new Buffer(_data, 'binary').toString('base64'),\n                                                headers: {\n                                                'cache-control': [{\n                                                    key: 'Cache-Control',\n                                                    value: 'max-age=100'\n                                                }],\n                                                    'content-type': [{\n                                                    key: 'Content-Type',\n                                                    value: 'image/jpeg'\n                                                }]\n                                            },\n                                            status: '200',\n                                            statusDescription: 'OK'\n                                        })\n                                    }).catch((err) =\u003e {\n                                        console.log(err)\n                                        callback(null, {\n                                            status: '302',\n                                            statusDescription: 'Found',\n                                            headers: {\n                                                location: [{\n                                                    key: 'Location',\n                                                    value: source_url,\n                                                }],\n                                            },\n                                        })\n                                    })\n                            }\n                        } catch (e) {\n                            console.log(e.stderr)\n                            callback(null, {\n                                status: '500',\n                                statusDescription: 'Error resizing image'\n                            })\n                        }\n                    }).on('error', (e) =\u003e {\n                        console.log(e)\n                        callback(null, {\n                            status: '302',\n                            statusDescription: 'Found',\n                            headers: {\n                                location: [{\n                                    key: 'Location',\n                                    value: source_url,\n                                }]\n                            }\n                        })\n                    })\n                } else {\n                    // grap the status code from the origin request\n                    // and return to the viewer\n                    console.log('statusCode: ', statusCode)\n                    callback(null, {\n                        status: statusCode.toString(),\n                        headers: originHeaders\n                    })\n                }\n            })\n        }\n    }\n}",
                            "filename": "/Users/Lionel/Documents/terraform-aws-cloudfront-image-compression/example/.terraform/modules/3e8139b2006212e3d10ceed2cea92996/code/origin_response/index.js",
                            "id": "ef6d53b921fcad9acddd2f4b94aaa1c4302861da"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.local"
                }
            },
            "depends_on": []
        }
    ]
}
